
DECLARE 
  existe_ETUDIANT INTEGER ; 
BEGIN 
  SELECT count(*) INTO existe_ETUDIANT 
  FROM user_tables WHERE table_name = upper('ETUDIANT') ;  
  IF existe_ETUDIANT > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE ETUDIANT CASCADE CONSTRAINTS' ;  
  END IF ;  
END ;
/

CREATE TABLE ETUDIANT 
(ID_ETUDIANT INT NOT NULL,
NOM_ETUDIANT  VARCHAR2(100) NOT NULL,
PRENOM_ETUDIANT  VARCHAR2(100) NOT NULL,
EMAIL_ETUDIANT  VARCHAR2(100) NOT NULL,
PRIMARY KEY (ID_ETUDIANT), 
DDN_ETUDIANT  DATE NOT NULL
); 

-- Validation email
ALTER TABLE ETUDIANT ADD CONSTRAINT CHK_EMAIL 
CHECK (REGEXP_LIKE(EMAIL_ETUDIANT, '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'));

-- Validation âge minimum
CREATE OR REPLACE TRIGGER TRG_VERIF_AGE_ETUDIANT
BEFORE INSERT OR UPDATE OF DDN_ETUDIANT ON ETUDIANT
FOR EACH ROW
BEGIN
    IF trunc((sysdate - :NEW.DDN_ETUDIANT)/365) < 16 THEN
        RAISE_APPLICATION_ERROR(-20001, 'L''étudiant doit avoir au moins 16 ans');
    END IF;
END;
/

CREATE SEQUENCE SEQ_ETUDIANT ;
CREATE TRIGGER TRIG_ETUDIANT 
BEFORE INSERT ON ETUDIANT FOR EACH ROW 
 BEGIN 
 SELECT SEQ_ETUDIANT.NEXTVAL INTO :new.ID_ETUDIANT FROM DUAL ;
 END ;
 /
 DECLARE 
  existe_PROFESSEUR INTEGER ;  
BEGIN 
  SELECT count(*) INTO existe_PROFESSEUR 
  FROM user_tables WHERE table_name = upper('PROFESSEUR') ;  
  IF existe_PROFESSEUR > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE PROFESSEUR CASCADE CONSTRAINTS' ; 
    END IF ;
    END ;
/
CREATE TABLE PROFESSEUR (
ID_PROFESSEUR INT NOT NULL,
NOM_PROFESSEUR VARCHAR2(100),
PRENOM_PROFESSEUR VARCHAR2(100),
ANNEE_EXP_PROFESSEUR INTEGER,
PRIMARY KEY (ID_PROFESSEUR),
CONSTRAINT CHK_EXP CHECK (ANNEE_EXP_PROFESSEUR >= 0)
); 

CREATE SEQUENCE SEQ_PROFESSEUR ;
CREATE TRIGGER TRIG_PROFESSEUR 
BEFORE INSERT ON PROFESSEUR FOR EACH ROW 
BEGIN 
 SELECT SEQ_PROFESSEUR.NEXTVAL INTO :new.ID_PROFESSEUR FROM DUAL ;   END ;  DECLARE 
  existe_EXAMEN INTEGER ;  BEGIN 
  SELECT count(*) INTO existe_EXAMEN 
  FROM user_tables WHERE table_name = upper('EXAMEN') ;
  IF existe_EXAMEN > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE EXAMEN CASCADE CONSTRAINTS' ;  
    END IF ;
END ;
/
CREATE TABLE EXAMEN 
(ID_EXAMEN INT NOT NULL, 
DATE_EXAMEN DATE,
NOTE_EXAMEN FLOAT, 
PRIMARY KEY (ID_EXAMEN)); 

CREATE SEQUENCE SEQ_EXAMEN ;
CREATE TRIGGER TRIG_EXAMEN BEFORE INSERT ON EXAMEN FOR EACH ROW 
 BEGIN 
 SELECT SEQ_EXAMEN.NEXTVAL INTO :new.ID_EXAMEN FROM DUAL ;   END ;  DECLARE 
  existe_COURS INTEGER ;  BEGIN 
  SELECT count(*) INTO existe_COURS 
  FROM user_tables WHERE table_name = upper('COURS') ; 
  IF existe_COURS > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE COURS CASCADE CONSTRAINTS' ;
  END IF ;
  END ; 
  /

CREATE TABLE COURS (
    ID_COURS NUMBER PRIMARY KEY,
    LANGUE_COURS VARCHAR2(100) NOT NULL,
    DATE_COURS DATE NOT NULL,
    NBRE_PARTICIPANTS_COURS NUMBER DEFAULT 0,
    PRIX_COURS DECIMAL(10,2) NOT NULL,
    ID_NIVEAU NUMBER,
    FOREIGN KEY (ID_NIVEAU) REFERENCES NIVEAU(ID_NIVEAU),
    CONSTRAINT CHK_PARTICIPANTS CHECK (NBRE_PARTICIPANTS_COURS >= 0),
    CONSTRAINT CHK_PRIX CHECK (PRIX_COURS > 0)
);

CREATE SEQUENCE SEQ_COURS ; 
CREATE TRIGGER TRIG_COURS BEFORE INSERT ON COURS FOR EACH ROW 
 BEGIN 
 SELECT SEQ_COURS.NEXTVAL INTO :new.ID_COURS FROM DUAL ;   END ;  DECLARE 
  existe_NIVEAU INTEGER ;  BEGIN 
  SELECT count(*) INTO existe_NIVEAU FROM user_tables
  WHERE table_name = upper('NIVEAU') ;    IF existe_NIVEAU > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE NIVEAU CASCADE CONSTRAINTS' ;  
    END IF ;
 END ;
/

-- Mise à jour automatique du nombre de participants
UPDATE COURS c
SET NBRE_PARTICIPANTS_COURS = (
    SELECT COUNT(*)
    FROM PARTICIPER p
    WHERE p.ID_COURS = c.ID_COURS
);
CREATE OR REPLACE TRIGGER TRG_MAJ_NBRE_PARTICIPANTS
AFTER INSERT OR DELETE ON PARTICIPER
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        UPDATE COURS
        SET NBRE_PARTICIPANTS_COURS = NBRE_PARTICIPANTS_COURS + 1
        WHERE ID_COURS = :NEW.ID_COURS;
    ELSIF DELETING THEN
        UPDATE COURS
        SET NBRE_PARTICIPANTS_COURS = NBRE_PARTICIPANTS_COURS - 1
        WHERE ID_COURS = :OLD.ID_COURS;
    END IF;
END;
/

CREATE TABLE NIVEAU 
(ID_NIVEAU INT NOT NULL,
NOM_NIVEAU VARCHAR2(50),
TARIF_NIVEAU NUMBER(10,2),
PRIMARY KEY (ID_NIVEAU)
);
ALTER TABLE NIVEAU ADD CONSTRAINT CHK_TARIF 
CHECK (TARIF_NIVEAU > 0);

CREATE SEQUENCE SEQ_NIVEAU ;
CREATE TRIGGER TRIG_NIVEAU 
BEFORE INSERT ON NIVEAU FOR EACH ROW 
 BEGIN 
 SELECT SEQ_NIVEAU.NEXTVAL INTO :new.ID_NIVEAU FROM DUAL ;   END ;  DECLARE 
  existe_APPARTENIR INTEGER ;
BEGIN 
  SELECT count(*) INTO existe_APPARTENIR
  FROM user_tables WHERE table_name = upper('APPARTENIR') ;  
  IF existe_APPARTENIR > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE APPARTENIR CASCADE CONSTRAINTS' ; 
    END IF ;
END ;/


CREATE TABLE APPARTENIR (
   ID_NIVEAU INT NOT NULL,
   ID_ETUDIANT INT NOT NULL, 
   DATE_DEBUT_APPARTENIR DATE NOT NULL, 
   DATE_FIN_APPARTENIR DATE,
   PRIMARY KEY (ID_NIVEAU, ID_ETUDIANT, DATE_DEBUT_APPARTENIR),
   FOREIGN KEY (ID_NIVEAU) REFERENCES NIVEAU(ID_NIVEAU),
   FOREIGN KEY (ID_ETUDIANT) REFERENCES ETUDIANT(ID_ETUDIANT)
); 

CREATE SEQUENCE SEQ_APPARTENIR ;
CREATE TRIGGER TRIG_APPARTENIR
BEFORE INSERT ON APPARTENIR FOR EACH ROW 
 BEGIN 
 SELECT SEQ_APPARTENIR.NEXTVAL INTO :new.ID_NIVEAU FROM DUAL ; 
 END ;
 /
 DECLARE 
  existe_PARTICIPER INTEGER ; 
BEGIN 
  SELECT count(*) INTO existe_PARTICIPER 
  FROM user_tables WHERE table_name = upper('PARTICIPER') ;   
  IF existe_PARTICIPER > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE PARTICIPER CASCADE CONSTRAINTS' ;  
    END IF ;
    END ;
    /
CREATE TABLE PARTICIPER(
ID_PARTICIPER INT PRIMARY KEY,
    ID_ETUDIANT INT NOT NULL,
    ID_COURS INT NOT NULL,
    DATE_INSCRIPTION DATE NOT NULL,
    MONTANT_PAYE DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (ID_ETUDIANT) REFERENCES ETUDIANT(ID_ETUDIANT),
    FOREIGN KEY (ID_COURS) REFERENCES COURS(ID_COURS),
    CONSTRAINT CHK_MONTANT CHECK (MONTANT_PAYE >= 0)
    ); 

-- Validation des dates d'inscription
CREATE OR REPLACE TRIGGER trg_date_inscription
BEFORE INSERT OR UPDATE ON PARTICIPER
FOR EACH ROW
BEGIN
    IF :NEW.DATE_INSCRIPTION > SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20001, ' MAUVAISE DATE INSCRIPTION ');
    END IF;
END;
CREATE SEQUENCE SEQ_PARTICIPER ;
CREATE TRIGGER TRIG_PARTICIPER 
BEFORE INSERT ON PARTICIPER FOR EACH ROW 
 BEGIN 
 SELECT SEQ_PARTICIPER.NEXTVAL INTO :new.ID_ETUDIANT_ FROM DUAL ;
 END ;
 /
 
 CREATE TABLE EVALUER (
    ID_EVALUER INT NOT NULL,
    ID_COURS INT NOT NULL,
    ID_EXAMEN INT NOT NULL,
    DATE_EVALUATION DATE NOT NULL,
    NOTE_DEBUT FLOAT NOT NULL,
    NOTE_FIN FLOAT NOT NULL,
    PRIMARY KEY (ID_EVALUER),
    FOREIGN KEY (ID_COURS) REFERENCES COURS(ID_COURS),
    FOREIGN KEY (ID_EXAMEN) REFERENCES EXAMEN(ID_EXAMEN),
    CONSTRAINT CHK_NOTES CHECK (
        NOTE_DEBUT BETWEEN 0 AND 20 
        AND NOTE_FIN BETWEEN 0 AND 20
    ));
 
 
 DECLARE 
  existe_ENSEIGNER INTEGER ; 
BEGIN 
  SELECT count(*) INTO existe_ENSEIGNER
  FROM user_tables WHERE table_name = upper('ENSEIGNER') ;   
  IF existe_ENSEIGNER > 0 THEN 
    EXECUTE IMMEDIATE 'DROP TABLE ENSEIGNER CASCADE CONSTRAINTS' ;    
  END IF ; 
  END ;
  /
CREATE TABLE ENSEIGNER (
 ID_PROFESSEUR INT NOT NULL,
    ID_COURS INT NOT NULL,
    DATE_DEBUT DATE NOT NULL,
    DATE_FIN DATE,
    PRIMARY KEY (ID_PROFESSEUR, ID_COURS, DATE_DEBUT),
    FOREIGN KEY (ID_PROFESSEUR) REFERENCES PROFESSEUR(ID_PROFESSEUR),
    FOREIGN KEY (ID_COURS) REFERENCES COURS(ID_COURS)
);
ALTER TABLE ENSEIGNER ADD CONSTRAINT CHK_DATES CHECK (DATE_FIN IS NULL OR DATE_FIN >= DATE_DEBUT);

CREATE SEQUENCE SEQ_ENSEIGNER ; 
CREATE TRIGGER TRIG_ENSEIGNER 
BEFORE INSERT ON ENSEIGNER FOR EACH ROW 
 BEGIN 
 SELECT SEQ_ENSEIGNER.NEXTVAL INTO :new.ID_PROFESSEUR FROM DUAL ;  
 END ;
 /
 
 CREATE TABLE PROGRESSION (
    ID_PROGRESSION INT NOT NULL,
    ID_ETUDIANT INT NOT NULL,
    ID_COURS INT NOT NULL,
    NIVEAU_INITIAL VARCHAR2(2) NOT NULL,
    NIVEAU_FINAL VARCHAR2(2) NOT NULL,
    TAUX_PROGRESSION NUMBER,
    PRIMARY KEY(ID_PROGRESSION),
    FOREIGN KEY (ID_ETUDIANT) REFERENCES ETUDIANT(ID_ETUDIANT),
    FOREIGN KEY (ID_COURS) REFERENCES COURS(ID_COURS),
    CONSTRAINT CHK_NIVEAUX CHECK (
        NIVEAU_INITIAL IN ('A1','A2','B1','B2','C1','C2')
        AND NIVEAU_FINAL IN ('A1','A2','B1','B2','C1','C2')
    )
);

-- Validation progression
ALTER TABLE PROGRESSION ADD CONSTRAINT CHK_PROGRESSION
CHECK (NIVEAU_FINAL >= NIVEAU_INITIAL);

-- Calcul automatique du taux de progression
CREATE OR REPLACE TRIGGER TRG_CALC_PROGRESSION
BEFORE INSERT OR UPDATE ON PROGRESSION
FOR EACH ROW
BEGIN
    :NEW.TAUX_PROGRESSION := CASE 
        WHEN :NEW.NIVEAU_INITIAL = :NEW.NIVEAU_FINAL THEN 0
        WHEN :NEW.NIVEAU_INITIAL = 'A1' AND :NEW.NIVEAU_FINAL = 'A2' THEN 20
        WHEN :NEW.NIVEAU_INITIAL = 'A2' AND :NEW.NIVEAU_FINAL = 'B1' THEN 40
        WHEN :NEW.NIVEAU_INITIAL = 'B1' AND :NEW.NIVEAU_FINAL = 'B2' THEN 60
        WHEN :NEW.NIVEAU_INITIAL = 'B2' AND :NEW.NIVEAU_FINAL = 'C1' THEN 80
        WHEN :NEW.NIVEAU_INITIAL = 'C1' AND :NEW.NIVEAU_FINAL = 'C2' THEN 100
        ELSE 0
    END;
END;
/

 ALTER TABLE EXAMEN ADD CONSTRAINT FK_EXAMEN_ID_ETUDIANT FOREIGN KEY (ID_ETUDIANT) REFERENCES ETUDIANT (ID_ETUDIANT); 
 ALTER TABLE EXAMEN ADD CONSTRAINT FK_EXAMEN_ID_COURS FOREIGN KEY (ID_COURS) REFERENCES COURS (ID_COURS);
 ALTER TABLE COURS ADD CONSTRAINT FK_COURS_ID_PROFESSEUR FOREIGN KEY (ID_PROFESSEUR) REFERENCES PROFESSEUR (ID_PROFESSEUR);
 ALTER TABLE COURS ADD CONSTRAINT FK_COURS_ID_NIVEAU FOREIGN KEY (ID_NIVEAU) REFERENCES NIVEAU (ID_NIVEAU);
 ALTER TABLE APPARTENIR ADD CONSTRAINT FK_APPARTENIR_ID_NIVEAU FOREIGN KEY (ID_NIVEAU) REFERENCES NIVEAU (ID_NIVEAU);
 ALTER TABLE APPARTENIR ADD CONSTRAINT FK_APPARTENIR_ID_ETUDIANT_ FOREIGN KEY (ID_ETUDIANT_) REFERENCES ETUDIANT_ (ID_ETUDIANT_);
 ALTER TABLE PARTICIPER ADD CONSTRAINT FK_PARTICIPER_ID_ETUDIANT_ FOREIGN KEY (ID_ETUDIANT_) REFERENCES ETUDIANT_ (ID_ETUDIANT_);
 ALTER TABLE PARTICIPER ADD CONSTRAINT FK_PARTICIPER_ID_COURS FOREIGN KEY (ID_COURS) REFERENCES COURS (ID_COURS); 
 ALTER TABLE ENSEIGNER ADD CONSTRAINT FK_ENSEIGNER_ID_PROFESSEUR FOREIGN KEY (ID_PROFESSEUR) REFERENCES PROFESSEUR (ID_PROFESSEUR); 
 ALTER TABLE ENSEIGNER ADD CONSTRAINT FK_ENSEIGNER_ID_NIVEAU FOREIGN KEY (ID_NIVEAU) REFERENCES NIVEAU (ID_NIVEAU);
 
 
-- ETUDIANT 

INSERT INTO ETUDIANT VALUES (1, 'Martin', 'Sophie', 'sophie.m@email.com', TO_DATE('1995-03-15', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (2, 'Dubois', 'Pierre', 'pierre.d@email.com', TO_DATE('1998-07-22', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (3, 'Bernard', 'Marie', 'marie.b@email.com', TO_DATE('1997-11-30', 'YYYY-MM-DD')); 
INSERT INTO ETUDIANT VALUES (4, 'Thomas', 'Lucas', 'lucas.t@email.com', TO_DATE('1999-04-18', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (5, 'Robert', 'Emma', 'emma.r@email.com', TO_DATE('1996-01-25', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (6, 'Richard', 'Louis', 'louis.r@email.com', TO_DATE('1997-09-14', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (7, 'Petit', 'Alice', 'alice.p@email.com', TO_DATE('1998-12-03', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (8, 'Durand', 'Hugo', 'hugo.d@email.com', TO_DATE('1995-06-27', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (9, 'Leroy', 'Jade', 'jade.l@email.com', TO_DATE('1999-02-11', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (10, 'Moreau', 'Gabriel', 'gabriel.m@email.com', TO_DATE('1996-10-08', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (11, 'Simon', 'Louise', 'louise.s@email.com', TO_DATE('1997-05-19', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (12, 'Laurent', 'Arthur', 'arthur.l@email.com', TO_DATE('1998-08-29', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (13, 'Michel', 'Léa', 'lea.m@email.com', TO_DATE('1995-12-07', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (14, 'Garcia', 'Jules', 'jules.g@email.com', TO_DATE('1999-03-24', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (15, 'David', 'Chloé', 'chloe.d@email.com', TO_DATE('1996-07-13', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (16, 'Bertrand', 'Raphaël', 'raphael.b@email.com', TO_DATE('1997-01-31', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (17, 'Roux', 'Anna', 'anna.r@email.com', TO_DATE('1998-04-09', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (18, 'Vincent', 'Léo', 'leo.v@email.com', TO_DATE('1995-08-26', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (19, 'Fournier', 'Eva', 'eva.f@email.com', TO_DATE('1999-11-16', 'YYYY-MM-DD'));
INSERT INTO ETUDIANT VALUES (20, 'Morel', 'Adam', 'adam.m@email.com', TO_DATE('1996-02-28', 'YYYY-MM-DD'));

-- PROFESSEUR
INSERT INTO PROFESSEUR VALUES (1, 'Garcia', 'Maria', 8);
INSERT INTO PROFESSEUR VALUES (2, 'Smith', 'John', 5);
INSERT INTO PROFESSEUR VALUES (3, 'Johnson', 'Sarah', 12);
INSERT INTO PROFESSEUR VALUES (4, 'Williams', 'Michael', 7);
INSERT INTO PROFESSEUR VALUES (5, 'Brown', 'Elizabeth', 15);
INSERT INTO PROFESSEUR VALUES (6, 'Jones', 'David', 6);
INSERT INTO PROFESSEUR VALUES (7, 'Miller', 'Emily', 9);
INSERT INTO PROFESSEUR VALUES (8, 'Davis', 'James', 11);
INSERT INTO PROFESSEUR VALUES (9, 'Wilson', 'Emma', 4);
INSERT INTO PROFESSEUR VALUES (10, 'Taylor', 'Daniel', 13);


-- NIVEAU 
INSERT INTO NIVEAU VALUES (1, 'A1', 300.00);
INSERT INTO NIVEAU VALUES (2, 'A2', 350.00);
INSERT INTO NIVEAU VALUES (3, 'B1', 400.00);
INSERT INTO NIVEAU VALUES (4, 'B2', 450.00);
INSERT INTO NIVEAU VALUES (5, 'C1', 500.00);
INSERT INTO NIVEAU VALUES (6, 'C2', 550.00);


-- COURS
INSERT INTO COURS VALUES (1, 'Anglais', TO_DATE('2024-01-15', 'YYYY-MM-DD'), 0,200,1);
INSERT INTO COURS VALUES (2, 'Espagnol', TO_DATE('2024-01-16', 'YYYY-MM-DD'), 0,300,2);
INSERT INTO COURS VALUES (3, 'Allemand', TO_DATE('2024-01-17', 'YYYY-MM-DD'), 0,400,3);
INSERT INTO COURS VALUES (4, 'Italien', TO_DATE('2024-01-18', 'YYYY-MM-DD'), 0,350, 2);
INSERT INTO COURS VALUES (5, 'Français', TO_DATE('2024-01-19', 'YYYY-MM-DD'), 0,150,1);
INSERT INTO COURS VALUES (6, 'Portugais', TO_DATE('2024-01-22', 'YYYY-MM-DD'), 0,250,1);
INSERT INTO COURS VALUES (7, 'Russe', TO_DATE('2024-01-23', 'YYYY-MM-DD'),0,156,3);
INSERT INTO COURS VALUES (8, 'Chinois', TO_DATE('2024-01-24', 'YYYY-MM-DD'), 0,500,4);
INSERT INTO COURS VALUES (9, 'Japonais', TO_DATE('2024-01-25', 'YYYY-MM-DD'), 0, 600,5);
INSERT INTO COURS VALUES (10, 'Coréen', TO_DATE('2024-01-26', 'YYYY-MM-DD'), 0, 450,6);


-- EXAMEN
INSERT INTO EXAMEN VALUES (1, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 15.5);
INSERT INTO EXAMEN VALUES (2, TO_DATE('2024-02-02', 'YYYY-MM-DD'), 17.0);
INSERT INTO EXAMEN VALUES (3, TO_DATE('2024-02-03', 'YYYY-MM-DD'), 14.5);
INSERT INTO EXAMEN VALUES (4, TO_DATE('2024-02-04', 'YYYY-MM-DD'), 16.0);
INSERT INTO EXAMEN VALUES (5, TO_DATE('2024-02-05', 'YYYY-MM-DD'), 18.5);
INSERT INTO EXAMEN VALUES (6, TO_DATE('2024-02-06', 'YYYY-MM-DD'), 13.0);
INSERT INTO EXAMEN VALUES (7, TO_DATE('2024-02-07', 'YYYY-MM-DD'), 19.0);
INSERT INTO EXAMEN VALUES (8, TO_DATE('2024-02-08', 'YYYY-MM-DD'), 12.5);
INSERT INTO EXAMEN VALUES (9, TO_DATE('2024-02-09', 'YYYY-MM-DD'), 16.5);
INSERT INTO EXAMEN VALUES (10, TO_DATE('2024-02-10', 'YYYY-MM-DD'), 15.0);

-- ENSEIGNER
INSERT INTO ENSEIGNER VALUES (1, 1, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-06-30', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (2, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), NULL);
INSERT INTO ENSEIGNER VALUES (3, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (4, 4, TO_DATE('2024-01-15', 'YYYY-MM-DD'), NULL);
INSERT INTO ENSEIGNER VALUES (5, 5, TO_DATE('2024-01-15', 'YYYY-MM-DD'), TO_DATE('2024-07-31', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (6, 6, TO_DATE('2024-02-01', 'YYYY-MM-DD'), NULL);
INSERT INTO ENSEIGNER VALUES (7, 7, TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-08-31', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (8, 8, TO_DATE('2024-02-15', 'YYYY-MM-DD'), NULL);
INSERT INTO ENSEIGNER VALUES (9, 9, TO_DATE('2024-02-15', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (10, 10, TO_DATE('2024-03-01', 'YYYY-MM-DD'), NULL);
--
INSERT INTO ENSEIGNER VALUES (4, 4, TO_DATE('2024-01-14', 'YYYY-MM-DD'), NULL);
INSERT INTO ENSEIGNER VALUES (5, 2, TO_DATE('2024-01-25', 'YYYY-MM-DD'), TO_DATE('2024-07-31', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (6, 1, TO_DATE('2024-02-27', 'YYYY-MM-DD'), NULL);
INSERT INTO ENSEIGNER VALUES (7, 7, TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-08-31', 'YYYY-MM-DD'));
INSERT INTO ENSEIGNER VALUES (8, 8, TO_DATE('2024-05-15', 'YYYY-MM-DD'), NULL);


-- APPARTENIR
INSERT INTO APPARTENIR VALUES (1, 1, TO_DATE('2024-01-01', 'YYYY-MM-DD'), TO_DATE('2024-03-31', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (2, 2, TO_DATE('2024-01-01', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (1, 3, TO_DATE('2024-01-15', 'YYYY-MM-DD'), TO_DATE('2024-04-15', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (3, 4, TO_DATE('2024-01-15', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (2, 5, TO_DATE('2024-02-01', 'YYYY-MM-DD'), TO_DATE('2024-05-31', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (4, 6, TO_DATE('2024-02-01', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (3, 7, TO_DATE('2024-02-15', 'YYYY-MM-DD'), TO_DATE('2024-06-15', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (5, 8, TO_DATE('2024-02-15', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (4, 9, TO_DATE('2024-03-01', 'YYYY-MM-DD'), TO_DATE('2024-07-31', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (6, 10, TO_DATE('2024-03-01', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (5, 11, TO_DATE('2024-03-15', 'YYYY-MM-DD'), TO_DATE('2024-08-15', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (1, 12, TO_DATE('2024-03-15', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (6, 13, TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (2, 14, TO_DATE('2024-04-01', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (1, 15, TO_DATE('2024-04-15', 'YYYY-MM-DD'), TO_DATE('2024-10-15', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (3, 16, TO_DATE('2024-04-15', 'YYYY-MM-DD'), NULL);
--
INSERT INTO APPARTENIR VALUES (6, 14, TO_DATE('2024-03-01', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (5, 1, TO_DATE('2024-03-15', 'YYYY-MM-DD'), TO_DATE('2024-08-15', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (1, 13, TO_DATE('2024-03-15', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (6, 12, TO_DATE('2024-04-01', 'YYYY-MM-DD'), TO_DATE('2024-09-30', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (2, 9, TO_DATE('2024-04-01', 'YYYY-MM-DD'), NULL);
INSERT INTO APPARTENIR VALUES (1, 1, TO_DATE('2024-04-15', 'YYYY-MM-DD'), TO_DATE('2024-10-15', 'YYYY-MM-DD'));
INSERT INTO APPARTENIR VALUES (3, 17, TO_DATE('2024-04-15', 'YYYY-MM-DD'), NULL);

--PROGRESSION
INSERT INTO PROGRESSION VALUES (1, 1, 10, 'A1', 'A2',NULL);
INSERT INTO PROGRESSION VALUES (2, 2, 2,  'B1', 'B2',NULL);
INSERT INTO PROGRESSION VALUES (3, 3, 5, 'C1', 'C2',NULL);
INSERT INTO PROGRESSION VALUES (4, 4, 1, 'A2', 'B1',NULL);
INSERT INTO PROGRESSION VALUES (5, 5, 1, 'B2', 'C1',NULL);
INSERT INTO PROGRESSION VALUES (6, 6, 6,  'A1', 'A2',NULL);
INSERT INTO PROGRESSION VALUES (7, 7, 7,  'B1', 'B2',NULL);
INSERT INTO PROGRESSION VALUES (8, 8, 8 , 'C1', 'C2',NULL);
INSERT INTO PROGRESSION VALUES (9, 9, 9, 'A2', 'B1',NULL);
INSERT INTO PROGRESSION VALUES (10, 10, 1,'B2', 'C1',NULL);
--
INSERT INTO PROGRESSION VALUES (11, 14, 1, 'B2', 'C1', NULL);
INSERT INTO PROGRESSION VALUES (12,15, 6, 'A1', 'A2', NULL);
INSERT INTO PROGRESSION VALUES (13, 17, 7, 'B1', 'B2', NULL);
INSERT INTO PROGRESSION VALUES (14, 1, 8, 'C1', 'C2', NULL);
INSERT INTO PROGRESSION VALUES (15, 6, 9, 'A2', 'B1', NULL);
INSERT INTO PROGRESSION VALUES (16, 12, 1, 'B2', 'C1', NULL);


-- EVALUER 
INSERT INTO EVALUER VALUES (1, 1, 1, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 10.0, 15.0);
INSERT INTO EVALUER VALUES (2, 4, 2, TO_DATE('2024-01-10', 'YYYY-MM-DD'), 8.5, 12.0);
INSERT INTO EVALUER VALUES (3, 3, 3, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 6.0, 9.0);
INSERT INTO EVALUER VALUES (4, 4, 4, TO_DATE('2024-01-20', 'YYYY-MM-DD'), 14.0, 18.0);
INSERT INTO EVALUER VALUES (5, 5, 5, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 5.0, 8.0);
INSERT INTO EVALUER VALUES (6, 6, 6, TO_DATE('2024-02-05', 'YYYY-MM-DD'), 9.0, 13);
INSERT INTO EVALUER VALUES (7, 7, 7, TO_DATE('2024-02-10', 'YYYY-MM-DD'), 12.0, 17.0);
INSERT INTO EVALUER VALUES (8, 8, 8, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 7.0, 11.0);
INSERT INTO EVALUER VALUES (9, 9, 9, TO_DATE('2024-02-20', 'YYYY-MM-DD'), 4.0, 6.0);
INSERT INTO EVALUER VALUES (10, 10, 10, TO_DATE('2024-02-25', 'YYYY-MM-DD'), 16.0, 19.5);
--
INSERT INTO EVALUER VALUES (11, 1, 4, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 5.0, 3.0);
INSERT INTO EVALUER VALUES (12, 4, 7, TO_DATE('2024-02-05', 'YYYY-MM-DD'), 9.0, 13.0);
INSERT INTO EVALUER VALUES (13, 7, 1, TO_DATE('2024-02-10', 'YYYY-MM-DD'), 12.0, 17.0);
INSERT INTO EVALUER VALUES (14, 4, 8, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 7.0, 13.0);
INSERT INTO EVALUER VALUES (15, 8, 9, TO_DATE('2024-02-20', 'YYYY-MM-DD'), 4.0, 6.0);
INSERT INTO EVALUER VALUES (16, 3, 2, TO_DATE('2024-02-25', 'YYYY-MM-DD'), 16.0, 11.5);


--PARTICIPER 
INSERT INTO PARTICIPER VALUES (1, 1, 1, TO_DATE('2024-01-01', 'YYYY-MM-DD'), 150.00);
INSERT INTO PARTICIPER VALUES (2, 2, 2, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 200.00);
INSERT INTO PARTICIPER VALUES (3, 3, 3, TO_DATE('2024-01-10', 'YYYY-MM-DD'), 175.50);
INSERT INTO PARTICIPER VALUES (4, 4, 4, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 300.00);
INSERT INTO PARTICIPER VALUES (5, 5, 5, TO_DATE('2024-01-20', 'YYYY-MM-DD'), 120.75);
INSERT INTO PARTICIPER VALUES (6, 6, 6, TO_DATE('2024-01-25', 'YYYY-MM-DD'), 250.00);
INSERT INTO PARTICIPER VALUES (7, 7, 7, TO_DATE('2024-02-01', 'YYYY-MM-DD'), 180.00);
INSERT INTO PARTICIPER VALUES (8, 8, 8, TO_DATE('2024-02-05', 'YYYY-MM-DD'), 220.50);
INSERT INTO PARTICIPER VALUES (9, 9, 9, TO_DATE('2024-02-10', 'YYYY-MM-DD'), 100.00);
INSERT INTO PARTICIPER VALUES (10, 10, 10, TO_DATE('2024-02-15', 'YYYY-MM-DD'), 275.00);
--
INSERT INTO PARTICIPER VALUES (11, 4, 6, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 200.00);
INSERT INTO PARTICIPER VALUES (12, 5, 9, TO_DATE('2024-01-04', 'YYYY-MM-DD'), 150.75);
INSERT INTO PARTICIPER VALUES (13, 6, 1, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 200.00);
INSERT INTO PARTICIPER VALUES (14, 7, 7, TO_DATE('2024-03-01', 'YYYY-MM-DD'), 180.00);
INSERT INTO PARTICIPER VALUES (15, 8, 3, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 260.50);
--
INSERT INTO PARTICIPER VALUES (16, 15, 6, TO_DATE('2024-01-15', 'YYYY-MM-DD'), 250.00);
INSERT INTO PARTICIPER VALUES (17, 10, 9, TO_DATE('2024-01-04', 'YYYY-MM-DD'), 130.75);
INSERT INTO PARTICIPER VALUES (18, 20, 1, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 210.00);
INSERT INTO PARTICIPER VALUES (19, 16, 7, TO_DATE('2024-03-01', 'YYYY-MM-DD'), 150.00);
INSERT INTO PARTICIPER VALUES (20, 15, 3, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 290.50);
--
INSERT INTO PARTICIPER VALUES (21, 11, 5, TO_DATE('2024-01-16', 'YYYY-MM-DD'), 210.00);
INSERT INTO PARTICIPER VALUES (22, 13, 3, TO_DATE('2024-01-07', 'YYYY-MM-DD'), 160.75);
INSERT INTO PARTICIPER VALUES (23, 9, 1, TO_DATE('2024-04-05', 'YYYY-MM-DD'), 220.00);
INSERT INTO PARTICIPER VALUES (24, 14, 8, TO_DATE('2024-01-01', 'YYYY-MM-DD'), 184.00);
INSERT INTO PARTICIPER VALUES (25, 17, 1, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 261.00);
--
INSERT INTO PARTICIPER VALUES (26, 19, 5, TO_DATE('2024-01-16', 'YYYY-MM-DD'), 310.00);
INSERT INTO PARTICIPER VALUES (27, 20, 10, TO_DATE('2024-01-07', 'YYYY-MM-DD'), 260.75);
INSERT INTO PARTICIPER VALUES (28, 15, 6, TO_DATE('2024-04-05', 'YYYY-MM-DD'), 290.00);
INSERT INTO PARTICIPER VALUES (29, 13, 1, TO_DATE('2024-01-01', 'YYYY-MM-DD'), 194.00);
INSERT INTO PARTICIPER VALUES (30, 1, 1, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 361.00);
INSERT INTO PARTICIPER VALUES (31, 11, 5, TO_DATE('2024-01-16', 'YYYY-MM-DD'), 290.00);
INSERT INTO PARTICIPER VALUES (32, 13, 6, TO_DATE('2024-01-07', 'YYYY-MM-DD'), 110.75);
INSERT INTO PARTICIPER VALUES (33, 9, 4, TO_DATE('2024-04-05', 'YYYY-MM-DD'), 260.00);
INSERT INTO PARTICIPER VALUES (34, 14, 3, TO_DATE('2024-01-01', 'YYYY-MM-DD'), 384.00);
INSERT INTO PARTICIPER VALUES (55, 18, 10, TO_DATE('2024-01-05', 'YYYY-MM-DD'), 291.00);


-- 1. Cours avec le plus de participants
SELECT ID_COURS, LANGUE_COURS, NBRE_PARTICIPANTS_COURS
FROM COURS
ORDER BY NBRE_PARTICIPANTS_COURS DESC;


-- 2. Étudiants ayant le plus progressé
SELECT e.NOM_ETUDIANT, e.PRENOM_ETUDIANT,
       p.NIVEAU_INITIAL, p.NIVEAU_FINAL,
       p.TAUX_PROGRESSION,
       c.LANGUE_COURS
FROM ETUDIANT e
JOIN PROGRESSION p ON e.ID_ETUDIANT = p.ID_ETUDIANT
JOIN COURS c ON p.ID_COURS = c.ID_COURS
ORDER BY p.TAUX_PROGRESSION DESC;

-- 3. Langues les plus enseignées
SELECT c.LANGUE_COURS, 
       COUNT(DISTINCT p.ID_ETUDIANT) as nb_etudiants,
       n.NOM_NIVEAU
FROM COURS c
JOIN PROGRESSION p ON c.ID_COURS = p.ID_COURS
JOIN APPARTENIR a ON p.ID_ETUDIANT = a.ID_ETUDIANT
JOIN NIVEAU n ON a.ID_NIVEAU = n.ID_NIVEAU
GROUP BY c.LANGUE_COURS, n.NOM_NIVEAU
ORDER BY nb_etudiants DESC;

--Trouver les évaluations d’un examen spécifique dans un cours donné
SELECT E.NOM_ETUDIANT,
       E.PRENOM_ETUDIANT,
       p.ID_COURS, 
       e.NOTE_DEBUT, 
       e.NOTE_FIN, 
        e.DATE_EVALUATION
FROM ETUDIANT E
JOIN PARTICIPER p ON E.ID_ETUDIANT =p.ID_ETUDIANT
JOIN EVALUER  e ON e.ID_COURS =p.ID_COURS
WHERE p.ID_COURS = 1
;

-- 5. Revenus par langue
SELECT c.LANGUE_COURS,
       SUM(n.TARIF_NIVEAU) as revenus_totaux,
       COUNT(DISTINCT p.ID_ETUDIANT) as nb_etudiants
FROM COURS c
JOIN PROGRESSION p ON c.ID_COURS = p.ID_COURS
JOIN APPARTENIR a ON p.ID_ETUDIANT = a.ID_ETUDIANT
JOIN NIVEAU n ON a.ID_NIVEAU = n.ID_NIVEAU
GROUP BY c.LANGUE_COURS
ORDER BY revenus_totaux DESC;
 
 
COMMIT;
 